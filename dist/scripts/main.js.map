{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/**\r\n * TIMER\r\n */\r\nlet hoursCellArray = document.getElementsByClassName('hours');\r\nlet minutesCellArray = document.getElementsByClassName('minutes');\r\nlet secondsCellArray = document.getElementsByClassName('seconds');\r\n\r\nfunction showTimeToMidnight() {\r\n    let now = new Date();\r\n    let nowHours = now.getHours();\r\n    let nowMinutes = now.getMinutes();\r\n    let nowSeconds = now.getSeconds();\r\n\r\n    let hoursToMidnight = 0;\r\n    let minutesToMidnight = 0;\r\n    let secondsToMidnight = 0;\r\n\r\n    // Get hours to midnight\r\n    function getHoursToMidnight() {\r\n        if (nowMinutes === 0 && nowSeconds === 0) {\r\n            hoursToMidnight = 24 - nowHours;\r\n        } else {\r\n            hoursToMidnight = 23 - nowHours;\r\n        }\r\n        hoursToMidnight = String(hoursToMidnight);\r\n        return hoursToMidnight.length === 2 ? hoursToMidnight : '0' + hoursToMidnight;\r\n    }\r\n\r\n    // Get minutes to midnight\r\n    function getMinutesToMidnight() {\r\n        if (nowMinutes === 0 && nowSeconds === 0) {\r\n            minutesToMidnight = 0;\r\n        } else {\r\n            minutesToMidnight = 59 - nowMinutes;\r\n        }\r\n        minutesToMidnight = String(minutesToMidnight);\r\n        return minutesToMidnight.length === 2 ? minutesToMidnight : '0' + minutesToMidnight;\r\n    }\r\n\r\n    // Get seconds to midnight\r\n    function getSecondsToMidnight() {\r\n        if (nowSeconds === 0) {\r\n            secondsToMidnight = 0;\r\n        } else {\r\n            secondsToMidnight = 60 - nowSeconds;\r\n        }\r\n        secondsToMidnight = String(secondsToMidnight);\r\n        return secondsToMidnight.length === 2 ? secondsToMidnight : '0' + secondsToMidnight;\r\n    }\r\n\r\n    // Update timer cells\r\n    for (let item of hoursCellArray) {\r\n        item.textContent = getHoursToMidnight();\r\n    }\r\n    for (let item of minutesCellArray) {\r\n        item.textContent = getMinutesToMidnight();\r\n    }\r\n    for (let item of secondsCellArray) {\r\n        item.textContent = getSecondsToMidnight();\r\n    }\r\n    // console.log(`${getHoursToMidnight()}:${getMinutesToMidnight()}:${getSecondsToMidnight()}`);\r\n    setTimeout(showTimeToMidnight, 200);\r\n}\r\n\r\nshowTimeToMidnight();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * \r\n * - - - SLIDER - - -\r\n * \r\n * \r\n */\r\nlet sliderBlock = document.querySelector('.slider');\r\nlet sliderRow = document.querySelector('.slider__row');\r\nlet arrowsBlock = document.querySelector('.slider__arrows');\r\nlet widthSliderCell = 440;\r\nsliderRow.style.left = '-440px';\r\n\r\nfunction clickHandler(event) {\r\n    let leftCoordinate = Number(sliderRow.style.left.slice(0, -2))\r\n    let dotsLiveCollection = sliderBlock.getElementsByClassName('slider-dots__item');\r\n    let dotActiveNowElement = sliderBlock.getElementsByClassName('slider-dots__item_active')[0];\r\n    let numberActiveElementNow = Array.from(dotsLiveCollection).indexOf(dotActiveNowElement);\r\n    let nextNumberActiveElement = 0;\r\n\r\n    function removeActiveClass(acitveElement) {\r\n        acitveElement.classList.remove('slider-dots__item_active');\r\n    }\r\n\r\n    removeActiveClass(dotActiveNowElement);\r\n    // Processing click on left arrow\r\n    if (event.target.classList.contains('slider__arrows_left')) {\r\n        if (leftCoordinate === 0) {\r\n            nextNumberActiveElement = (dotsLiveCollection.length) - 1;\r\n            sliderRow.style.left = '-880px';\r\n        } else  {\r\n            nextNumberActiveElement = numberActiveElementNow - 1;\r\n            sliderRow.style.left = (leftCoordinate + widthSliderCell) + 'px';\r\n        }\r\n    }\r\n    // Processing click on right arrow\r\n    if (event.target.classList.contains('slider__arrows_right')) {\r\n        if (leftCoordinate === -880) {\r\n            sliderRow.style.left = '0px';\r\n            nextNumberActiveElement = 0;\r\n        } else  {\r\n            nextNumberActiveElement = numberActiveElementNow + 1;\r\n            sliderRow.style.left = (leftCoordinate - widthSliderCell) + 'px';\r\n        }\r\n    }\r\n    dotsLiveCollection[nextNumberActiveElement].classList.add('slider-dots__item_active');\r\n}\r\n\r\nsliderBlock.addEventListener('click', clickHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * \r\n * - - - TELEGRAM BOT - - -\r\n * \r\n */\r\n// import { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } from \"./telegbot-tok.js\";\r\n\r\n// // Bot name - order processing\r\n// // Username for bot - sadovShopBot\r\n// // Name of group with bot - sadovShop\r\n\r\n// // API - адрес куда посылаем запрос\r\nconst API = '/send-message';\r\n\r\nasync function sendEmailTelegram(event) {\r\n    event.preventDefault();\r\n\r\n    const form = event.target;\r\n    const formBtn = document.querySelector('#form-order #order-button');\r\n    const formData = new FormData(form);\r\n    const fromDataObject = Object.fromEntries(formData.entries());\r\n\r\n    const { name, phone } = fromDataObject;\r\n    console.log(`Ім'я покупця: ${name}\\nНомер телефона: ${phone}`);\r\n\r\n    try {\r\n        formBtn.textContent = 'Не закривайте цю сторінку, доки надсилаються дані...';\r\n        const response = await fetch(API, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name, phone })\r\n        });\r\n\r\n        if (response.ok) {\r\n            alert('Дякуємо! Ваше замовлення прийнято. Ми зв`яжемось з Вами найближчим часом.');\r\n            form.reset();\r\n        } else {\r\n            throw new Error('Failed to send message');\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        alert('Нажаль ми не отримали Ваші дані. Будь-ласка, знову введіть Ваші дані та натисність на кнопку \"ОФОРМИТИ ЗАМОВЛЕННЯ\".');\r\n    } finally {\r\n        formBtn.textContent = 'ОФОРМИТИ ЗАМОВЛЕННЯ';\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * \r\n * - - - FORM VALIDATION - - -\r\n * \r\n * \r\n */\r\n// let form = document.getElementById('form-order');\r\n\r\n\r\n// function validation(form) {\r\n//     let result = true;\r\n//     const arrInputs = form.querySelectorAll('input'); // array of input tags\r\n\r\n\r\n//     function removeError(input) {\r\n//         const parentOfInput = input.parentNode;\r\n//         if (parentOfInput.classList.contains('error')) {\r\n//             parentOfInput.querySelector('.error-label').remove();\r\n//             parentOfInput.classList.remove('error');\r\n//         }\r\n//     }\r\n    \r\n\r\n//     function createError(input, text) {\r\n//         const parentOfInput = input.parentNode;\r\n//         const errorLabel = document.createElement('label');\r\n//         errorLabel.classList.add('error-label');\r\n//         errorLabel.textContent = text + input.placeholder[0].toLowerCase() + input.placeholder.slice(1);\r\n        \r\n//         parentOfInput.classList.add('error');\r\n//         parentOfInput.append(errorLabel);\r\n//     }\r\n\r\n//     arrInputs.forEach( input => {\r\n//         removeError(input);\r\n\r\n//         if (input.value === '') {\r\n//             createError(input, 'Будь-ласка, ');\r\n//             result = false;\r\n//         }\r\n//     })\r\n\r\n//     return result;\r\n// }\r\n\r\n// function handlerForm(event) {\r\n//     event.preventDefault();\r\n//     // validation(this) // \"this\" - это тег form, форма которую мы обрабатываем\r\n//     alert('The form has been validated in HTML.')\r\n\r\n//     // if (validation(this) === true) {\r\n//     //     // Скорее всего в этом блоке нужно будет передавать данные в Телеграм\r\n//     //     alert('The form has been validated.');\r\n//     // }\r\n// }\r\n\r\n// form.addEventListener('submit', handlerForm);\r\n\r\n"],"file":"main.js"}